steps:
  # Get the Docker Hub user ID from Secrets Manager and save it to a file
  - name: 'gcr.io/cloud-builders/gcloud'
    id: "getCredentials"
    waitFor: ["-"]
    entrypoint: 'bash'
    args: ["./binfmt/getCredentials.sh"]

  # Log in to Docker Hub using the credentials obtained in the previous steps
  - name: 'gcr.io/cloud-builders/docker'
    id: "dockerLogin"
    waitFor: ["getCredentials"]
    entrypoint: 'bash'
    args: ["-c", "docker login --username=$(cat ./UserID) --password=$(cat ./AccessToken)"]

  # Build from Dockerfile using the docker-buildx:stable image, and
  # tag the image with 'untested' and push to Docker Hub
  - name: 'harshavardhanj/docker-buildx:stable'
    id: "dockerBuildPush"
    waitFor: ["dockerLogin"]
    entrypoint: "sh"
    args:
      - '-c'
      - |
        entrypoint.sh build --build-arg BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ) \
        --build-arg VCS_REF=$SHORT_SHA -t harshavardhanj/binfmt:untested \
        -f ./binfmt/Dockerfile --push ./binfmt/.

  # Test the container pushed in the previous step
  - name: "gcr.io/gcp-runtimes/container-structure-test"
    id: "containerTest"
    waitFor: ["dockerBuildPush"]
    args:
      - 'test'
      - '--pull'
      - '--image'
      - 'harshavardhanj/binfmt:untested'
      - '--config'
      - './binfmt/container-structure-test.yaml'

  # Pull `docker-buildx:stable` image from Docker Hub and build 'binfmt' image with multi-arch support
  ### NOTE:
  ###     In the build step below, the `docker-buildx:stable` image is used to build
  ###     the `binfmt:testing` image with multi-arch support. Therefore, since
  ###     there is a cyclical dependency because the `docker-buildx:stable` image uses
  ###     the `binfmt:stable` image, before running this in Cloud Build, a working
  ###     version of the `docker-buildx:stable`, and of `binfmt:stable` image will need 
  ###     to be present in the container registry(Docker Hub, in this case). The image will
  ###     need to be built either locally or elsewhere and pushed to the registry before the 
  ###     below step can be run.
  - name: 'harshavardhanj/docker-buildx:stable'
    id: "dockerBuildxPush"
    waitFor: ["containerTest"]
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        entrypoint.sh build --build-arg BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ) \
        --build-arg VCS_REF=$SHORT_SHA -t harshavardhanj/binfmt:latest -t harshavardhanj/binfmt:stable \
        --platform linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v6,linux/arm/v7 \
        --cache-from harshavardhanj/binfmt:latest --push -f ./binfmt/Dockerfile ./binfmt/.

  # Get unique URL which is used to prompt MicroBadger to update image metadata.
  # The token, which is a part of the unique URL, is stored with Secrets Manager.
  # This step retrieves that secret and saves it to a file.
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'webhookSecret'
    waitFor: ["dockerBuildxPush"]
    entrypoint: 'sh'
    args: ["-c", "gcloud beta secrets versions access 1 --secret=binfmt-microbadger-webhook >./microbadgerWebhook"]

  # Calling the webhook on Micro Badger in order to update image metadata
  - name: 'gcr.io/cloud-builders/curl'
    id: "microbadgerWebhook"
    waitFor: ["webhookSecret"]
    entrypoint: 'sh'
    args: ["-c", "curl -X POST https://hooks.microbadger.com/images/harshavardhanj/binfmt/$(cat ./microbadgerWebhook)"]
timeout: "3600s"
